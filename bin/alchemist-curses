#!/usr/bin/env ruby
# encoding: utf-8

$LOAD_PATH << "../lib"

require 'bundler'
Bundler.setup

require 'alchemist-server'
require 'ffi-ncurses'
require 'alchemist-server/curses/item_window'
require 'alchemist-server/curses/prompt_window'
require 'alchemist-server/curses/glyph_window'
require 'alchemist-server/curses/messages_window'
require 'alchemist-server/curses/geography_window'
require 'alchemist-server/event_machine/client_protocol'

host = ARGV[0] || 'localhost'
port = (ARGV[1] || 7900).to_i

def start(host, port)
  EventMachine.run do
    EventMachine.connect host, port, Handler
  end
end

module Handler
  include FFI::NCurses
  include Alchemist::EventMachine::ClientProtocol

  INVENTORY_LABEL = 'Inventory: '
  INVENTORY_SIZE = 64

  BASICS_LABEL = 'Basics: '
  BASICS_SIZE = INVENTORY_SIZE

  COMPOUNDS_LABEL = 'Compounds: '
  COMPOUNDS_SIZE = INVENTORY_SIZE

  AVATAR_COLOR_NUM = 1

  def post_init
    start_color
    init_pair AVATAR_COLOR_NUM, Color::BLACK, Color::GREEN

    @border_win = newwin 22, 45, 0, 0
    @geo_win = Alchemist::Curses::GeographyWindow.new(
      1, 1, AVATAR_COLOR_NUM)

    @location_win = newwin 1, 45, 23, 0

    @prompt_win = Alchemist::Curses::PromptWindow.new(
      24, 0, 80)

    @inventory_win = Alchemist::Curses::ItemWindow.new(
      INVENTORY_LABEL,
      INVENTORY_SIZE,
      25,
      0
    )

    @basics_win = Alchemist::Curses::ItemWindow.new(
      BASICS_LABEL,
      BASICS_SIZE,
      26,
      0
    )

    @compounds_win = Alchemist::Curses::ItemWindow.new(
      COMPOUNDS_LABEL,
      COMPOUNDS_SIZE,
      27,
      0
    )

    @error_win = newwin 1, 80, 28, 0
    @glyph_win = Alchemist::Curses::GlyphWindow.new 0, 46

    @messages_win = Alchemist::Curses::MessagesWindow.new(
      10, 80, 29, 0
    )
  end

  def draw_geo_border
    lr = '|'.ord
    tb = '-'.ord
    c = '+'.ord

    wborder @border_win,lr,lr,tb,tb,c,c,c,c
    wrefresh @border_win
  end

  def handle_see(data)
    if @location
      @geo_win.update @location, data
    end
  end

  def handle_location(data)
    x, y = data.split(/\s+/).map &:to_i
    @location = [x, y]
    draw_location *@location
    @geo_win.update_avatar @name, *@location
  end

  def draw_location(x, y)
    wclear @location_win
    wmove @location_win, 0, 0
    wprintw @location_win, "Location: #{x},#{y}"
    wrefresh @location_win
  end

  def handle_inventory(data)
    @inventory_win.update data
    move_to_avatar_position
  end

  def handle_basics(data)
    @basics_win.update data
    move_to_avatar_position
  end

  def handle_compounds(data)
    @compounds_win.update data
    move_to_avatar_position
  end

  def handle_messages(data)
    @messages_win.update data.split("\n")
    move_to_avatar_position
  end

  def move_to_avatar_position
    @geo_win.move_to_avatar_position
  end

  def handle_error(error)
    wmove @error_win, 0, 0
    wprintw @error_win, "Last error: "
    wprintw @error_win, error
    wrefresh @error_win
    move_to_avatar_position
  end

  def handle_avatars(data)
    locations = data.each_line.map do |line|
      name, x, y = line.split /\s+/
      { name => [x.to_i,y.to_i] }
    end

    @geo_win.update_avatars locations.reduce :merge
  end

  def handle_welcome
    EM.defer(-> { @prompt_win.ask "Enter your name" },
             -> name do
      @name = name
      login name
    end)
  end

  def handle_hello
    printw "Appearing...\n"
    refresh
    appear
  end

  def handle_appeared
    draw_geo_border
    who
    request_location
    look
    request_inventory
    request_basics
    request_compounds
    read
    action_loop
  end

  def act(char)
    case char
    when KEY_LEFT then move_action "west"
    when KEY_RIGHT then move_action "east"
    when KEY_UP then move_action "north"
    when KEY_DOWN then move_action "south"
    when 't'.ord then take_action
    when 'p'.ord then put_action
    when 'c'.ord then create_action
    when 'e'.ord then element_action
    when 'f'.ord then forge_action
    when 'F'.ord then formulate_action
    when 'm'.ord then post_message_action
    when 'r'.ord then read_action
    end
  end

  def move_action(direction)
    move direction
    look
  end

  def put_action
    if element = @inventory_win.have_user_select
      put element
      look
    end
  end

  def create_action
    if element = @basics_win.have_user_select
      create element
    end
  end

  def element_action
    if symbol = @glyph_win.have_user_select
      name = @prompt_win.ask "New Element Name"
      element symbol, name
      request_basics
    end
  end

  def forge_action
    if (ingred_1 = @inventory_win.have_user_select) &&
       (ingred_2 = @inventory_win.have_user_select) &&
       (result = @compounds_win.have_user_select)
      forge ingred_1, ingred_2, result
    end
  end

  def formulate_action
    if (ingred_1 = @inventory_win.have_user_select) &&
       (ingred_2 = @inventory_win.have_user_select) &&
       (result = @glyph_win.have_user_select)
      name = @prompt_win.ask "Compound Name"
      formulate ingred_1, ingred_2, result, name
      request_compounds
    end
  end

  def post_message_action
    if input = @prompt_win.ask("Message (# msg)")
      num, message = input.split(' ',2)
      message num, message
      read
    end
  end

  def take_action
    take
    look
  end

  def action_loop
    EM.defer(-> { getch },
             -> c do
                act c
                action_loop
             end)
  end
end

class UI
  def initialize(handler)
    @h = handler
  end
end

begin
  # tell the terminal to enter curses mode
  FFI::NCurses.initscr
  FFI::NCurses.noecho
  FFI::NCurses.halfdelay 1

  FFI::NCurses.printw "Connecting.... to #{host}:#{port}\n"

  # causes changes to be displayed on the screen - maybe this means that NCurses
  # uses front and back buffers for drawing?
  FFI::NCurses.refresh
  FFI::NCurses.keypad FFI::NCurses.stdscr, true

  start host, port
ensure
  # returns back to regular console mode
  FFI::NCurses.endwin
end

