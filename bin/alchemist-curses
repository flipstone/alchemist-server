#!/usr/bin/env ruby
# encoding: utf-8

$LOAD_PATH << "../lib"

require 'bundler'
Bundler.setup

require 'alchemist-server'
require 'ffi-ncurses'

host = ARGV[0] || 'localhost'
port = (ARGV[1] || 7900).to_i

def start(host, port)
  EventMachine.run do
    EventMachine.connect host, port, Handler
  end
end

module Handler
  include FFI::NCurses
  include EventMachine::Protocols::LineProtocol

  def receive_line(line)
    if line =~ /^Welcome, alchemical friend/
      login
    elsif line =~ /^response-to: (.*)$/
      @response_to = $1
      @response = ''

    elsif line =~ /^response-end$/
      if @response_to
        handle_response @response_to, @response
      end

      @response_to = nil
      @response = nil
    elsif @response
      @response << line
    end
  end

  def handle_response(response_to, response)
    case response_to
    when @name then login_success
    when "appear" then appear_success
    when "north","south","east","west" then look
    when "look" then
      clear
      printw response.pad_to_unicode_monospace
      wmove stdscr, 10, 20
      refresh
    end
  end

  def login
    EM.defer(-> { prompt "Enter your name:" },
             -> name do
      @name = name
      send_data name
      send_data "\n"
    end)
  end

  def login_success
    printw "Appearing...\n"
    refresh
    send_data "appear\n"
  end

  def appear_success
    look
    nav_loop
  end

  def look
    send_data "look\n"
  end

  def move(char)
    case char
    when KEY_LEFT then send_data "west\n"
    when KEY_RIGHT then send_data "east\n"
    when KEY_UP then send_data "north\n"
    when KEY_DOWN then send_data "south\n"
    else return false
    end

    true
  end

  def prompt(text)
    printw text
    printw ' '
    answer = ''

    while (c = getch) != "\n".ord
      if c > 0
        answer << c
        printw (''<<c)
      end
    end

    printw "\n"
    refresh

    answer.strip
  end

  def nav_loop
    EM.defer(-> { getch },
             -> c do
                look if move c
                nav_loop
             end)
  end
end

class UI
  def initialize(handler)
    @h = handler
  end
end

begin
  # tell the terminal to enter curses mode
  FFI::NCurses.initscr
  FFI::NCurses.noecho
  FFI::NCurses.halfdelay 1

  FFI::NCurses.printw "Connecting.... to #{host}:#{port}\n"

  # causes changes to be displayed on the screen - maybe this means that NCurses
  # uses front and back buffers for drawing?
  FFI::NCurses.refresh
  FFI::NCurses.keypad FFI::NCurses.stdscr, true

  start host, port
ensure
  # returns back to regular console mode
  FFI::NCurses.endwin
end

